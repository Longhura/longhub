-- Enhanced 360Â° Flying Script for Roblox with Improved Mobile Controls
-- Place this in a LocalScript inside StarterPlayerScripts

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Flying settings
local flyEnabled = false
local flySpeed = 50
local maxSpeed = 100
local minSpeed = 10
local speedIncrement = 5

-- Movement variables
local moveDirection = Vector3.new(0, 0, 0)
local isMoving = false

-- Button states
local buttonStates = {
    forward = false,
    backward = false,
    left = false,
    right = false,
    up = false,
    down = false
}

-- Rainbow colors for visual effects
local rainbowColors = {
    Color3.fromRGB(255, 0, 0),   -- Red
    Color3.fromRGB(255, 127, 0), -- Orange
    Color3.fromRGB(255, 255, 0), -- Yellow
    Color3.fromRGB(0, 255, 0),   -- Green
    Color3.fromRGB(0, 255, 255), -- Cyan
    Color3.fromRGB(0, 0, 255),   -- Blue
    Color3.fromRGB(139, 0, 255)  -- Purple
}

-- Function to create a draggable button with enhanced visuals
local function createDraggableButton(name, position, size, color, text, callback)
    local button = Instance.new("TextButton")
    button.Name = name
    button.Size = size
    button.Position = position
    button.BackgroundColor3 = color
    button.BackgroundTransparency = 0.3
    button.Text = text
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.GothamBold
    button.TextSize = 18
    button.BorderSizePixel = 0
    button.AutoButtonColor = true
    
    -- Add rounded corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0.2, 0)
    uiCorner.Parent = button
    
    -- Add stroke (border)
    local uiStroke = Instance.new("UIStroke")
    uiStroke.Thickness = 2
    uiStroke.Color = Color3.fromRGB(255, 255, 255)
    uiStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    uiStroke.Parent = button
    
    -- Make the button draggable
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    button.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = button.Position
            
            -- Visual feedback - darken button
            button.BackgroundTransparency = 0.1
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    -- Reset transparency
                    button.BackgroundTransparency = 0.3
                end
            end)
        end
        
        -- Call the callback function when button is pressed
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            callback(true)
        end
    end)
    
    button.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            callback(false)
            -- Reset transparency
            button.BackgroundTransparency = 0.3
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    RunService.RenderStepped:Connect(function()
        if dragging and button.Parent ~= nil then
            local delta = dragInput.Position - dragStart
            button.Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X, 
                startPos.Y.Scale, 
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    -- Add hover effect for PC users
    button.MouseEnter:Connect(function()
        button.BackgroundTransparency = 0.1
    end)
    
    button.MouseLeave:Connect(function()
        button.BackgroundTransparency = 0.3
    end)
    
    return button, uiStroke
end

-- Function to apply rainbow effect to a UIStroke
local function applyRainbowEffect(uiStroke)
    task.spawn(function()
        local index = 1
        while uiStroke and uiStroke.Parent do
            local nextColor = rainbowColors[index]
            local tween = TweenService:Create(uiStroke, TweenInfo.new(0.5, Enum.EasingStyle.Linear), {Color = nextColor})
            tween:Play()
            task.wait(0.5)
            
            index = index % #rainbowColors + 1
        end
    end)
end

-- Function to toggle flying
local function toggleFly()
    flyEnabled = not flyEnabled
    
    if flyEnabled then
        -- Enable flying
        humanoid:ChangeState(Enum.HumanoidStateType.Physics)
        rootPart.Anchored = true
        
        -- Create control GUI if it doesn't exist
        if not player.PlayerGui:FindFirstChild("FlyControlGui") then
            createControlGui()
        end
        
        -- Show control GUI
        player.PlayerGui.FlyControlGui.Enabled = true
        
        -- Notification
        game.StarterGui:SetCore("SendNotification", {
            Title = "Flying Enabled",
            Text = "Use on-screen controls to fly",
            Duration = 3
        })
    else
        -- Disable flying
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
        rootPart.Anchored = false
        rootPart.Velocity = Vector3.new(0, 0, 0)
        
        -- Hide control GUI
        if player.PlayerGui:FindFirstChild("FlyControlGui") then
            player.PlayerGui.FlyControlGui.Enabled = false
        end
        
        -- Reset movement
        moveDirection = Vector3.new(0, 0, 0)
        isMoving = false
        
        -- Reset button states
        for key, _ in pairs(buttonStates) do
            buttonStates[key] = false
        end
        
        -- Notification
        game.StarterGui:SetCore("SendNotification", {
            Title = "Flying Disabled",
            Text = "Normal movement restored",
            Duration = 3
        })
    end
end

-- Update speed display
local function updateSpeedDisplay()
    if player.PlayerGui:FindFirstChild("FlyControlGui") then
        local speedLabel = player.PlayerGui.FlyControlGui.SpeedFrame.SpeedLabel
        speedLabel.Text = "Flying Speed: " .. flySpeed
    end
end

-- Create the control GUI with enhanced visuals
function createControlGui()
    local controlGui = Instance.new("ScreenGui")
    controlGui.Name = "FlyControlGui"
    controlGui.ResetOnSpawn = false
    
    -- Main control panel
    local mainPanel = Instance.new("Frame")
    mainPanel.Name = "MainPanel"
    mainPanel.Size = UDim2.new(0, 300, 0, 200)
    mainPanel.Position = UDim2.new(0.5, -150, 0.1, 0)
    mainPanel.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
    mainPanel.BackgroundTransparency = 0.3
    mainPanel.BorderSizePixel = 0
    mainPanel.Parent = controlGui
    
    -- Add rounded corners to main panel
    local panelCorner = Instance.new("UICorner")
    panelCorner.CornerRadius = UDim.new(0.05, 0)
    panelCorner.Parent = mainPanel
    
    -- Add stroke to main panel
    local panelStroke = Instance.new("UIStroke")
    panelStroke.Thickness = 3
    panelStroke.Color = Color3.fromRGB(255, 0, 0)
    panelStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    panelStroke.Parent = mainPanel
    
    -- Apply rainbow effect to panel border
    applyRainbowEffect(panelStroke)
    
    -- Title label
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, 0, 0, 30)
    titleLabel.Position = UDim2.new(0, 0, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "FLY CONTROLS"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 20
    titleLabel.Parent = mainPanel
    
    -- Toggle button
    local toggleButton, toggleStroke = createDraggableButton(
        "ToggleButton",
        UDim2.new(0.5, -50, 0, 40),
        UDim2.new(0, 100, 0, 40),
        Color3.fromRGB(255, 0, 0),
        "TOGGLE FLY",
        function()
            -- This is a one-time action on click, not a continuous state
            toggleFly()
        end
    )
    toggleButton.Parent = mainPanel
    applyRainbowEffect(toggleStroke)
    
    -- Close button
    local closeButton, closeStroke = createDraggableButton(
        "CloseButton",
        UDim2.new(1, -35, 0, 5),
        UDim2.new(0, 30, 0, 30),
        Color3.fromRGB(200, 0, 0),
        "X",
        function()
            -- Hide the GUI
            controlGui.Enabled = false
            -- Disable flying
            if flyEnabled then
                toggleFly()
            end
        end
    )
    closeButton.Parent = mainPanel
    
    -- Speed display frame
    local speedFrame = Instance.new("Frame")
    speedFrame.Name = "SpeedFrame"
    speedFrame.Size = UDim2.new(0, 150, 0, 40)
    speedFrame.Position = UDim2.new(0.5, -75, 0, 90)
    speedFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    speedFrame.BackgroundTransparency = 0.5
    speedFrame.BorderSizePixel = 0
    speedFrame.Parent = mainPanel
    
    -- Add rounded corners to speed frame
    local speedCorner = Instance.new("UICorner")
    speedCorner.CornerRadius = UDim.new(0.2, 0)
    speedCorner.Parent = speedFrame
    
    local speedLabel = Instance.new("TextLabel")
    speedLabel.Name = "SpeedLabel"
    speedLabel.Size = UDim2.new(1, 0, 1, 0)
    speedLabel.BackgroundTransparency = 1
    speedLabel.Text = "Flying Speed: " .. flySpeed
    speedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    speedLabel.Font = Enum.Font.GothamBold
    speedLabel.TextSize = 18
    speedLabel.Parent = speedFrame
    
    -- Speed control buttons
    local speedUpButton, speedUpStroke = createDraggableButton(
        "SpeedUpButton",
        UDim2.new(0.7, 0, 0, 90),
        UDim2.new(0, 40, 0, 40),
        Color3.fromRGB(0, 255, 0),
        "+",
        function()
            flySpeed = math.min(flySpeed + speedIncrement, maxSpeed)
            updateSpeedDisplay()
        end
    )
    speedUpButton.Parent = mainPanel
    
    local speedDownButton, speedDownStroke = createDraggableButton(
        "SpeedDownButton",
        UDim2.new(0.3, -40, 0, 90),
        UDim2.new(0, 40, 0, 40),
        Color3.fromRGB(255, 165, 0),
        "-",
        function()
            flySpeed = math.max(flySpeed - speedIncrement, minSpeed)
            updateSpeedDisplay()
        end
    )
    speedDownButton.Parent = mainPanel
    
    -- Create directional controls panel
    local controlsPanel = Instance.new("Frame")
    controlsPanel.Name = "ControlsPanel"
    controlsPanel.Size = UDim2.new(0, 300, 0, 300)
    controlsPanel.Position = UDim2.new(0.5, -150, 0.6, 0)
    controlsPanel.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
    controlsPanel.BackgroundTransparency = 0.7
    controlsPanel.BorderSizePixel = 0
    controlsPanel.Parent = controlGui
    
    -- Add rounded corners to controls panel
    local controlsCorner = Instance.new("UICorner")
    controlsCorner.CornerRadius = UDim.new(0.05, 0)
    controlsCorner.Parent = controlsPanel
    
    -- Add stroke to controls panel
    local controlsStroke = Instance.new("UIStroke")
    controlsStroke.Thickness = 3
    controlsStroke.Color = Color3.fromRGB(0, 0, 255)
    controlsStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    controlsStroke.Parent = controlsPanel
    
    -- Apply rainbow effect to controls panel border
    applyRainbowEffect(controlsStroke)
    
    -- Movement buttons
    -- Forward
    local forwardButton, forwardStroke = createDraggableButton(
        "ForwardButton",
        UDim2.new(0.5, -35, 0, 30),
        UDim2.new(0, 70, 0, 70),
        Color3.fromRGB(0, 0, 255),
        "W",
        function(pressed)
            buttonStates.forward = pressed
            updateMoveDirection()
        end
    )
    forwardButton.Parent = controlsPanel
    
    -- Backward
    local backwardButton, backwardStroke = createDraggableButton(
        "BackwardButton",
        UDim2.new(0.5, -35, 0, 180),
        UDim2.new(0, 70, 0, 70),
        Color3.fromRGB(0, 0, 255),
        "S",
        function(pressed)
            buttonStates.backward = pressed
            updateMoveDirection()
        end
    )
    backwardButton.Parent = controlsPanel
    
    -- Left
    local leftButton, leftStroke = createDraggableButton(
        "LeftButton",
        UDim2.new(0.5, -115, 0, 105),
        UDim2.new(0, 70, 0, 70),
        Color3.fromRGB(0, 0, 255),
        "A",
        function(pressed)
            buttonStates.left = pressed
            updateMoveDirection()
        end
    )
    leftButton.Parent = controlsPanel
    
    -- Right
    local rightButton, rightStroke = createDraggableButton(
        "RightButton",
        UDim2.new(0.5, 45, 0, 105),
        UDim2.new(0, 70, 0, 70),
        Color3.fromRGB(0, 0, 255),
        "D",
        function(pressed)
            buttonStates.right = pressed
            updateMoveDirection()
        end
    )
    rightButton.Parent = controlsPanel
    
    -- Up
    local upButton, upStroke = createDraggableButton(
        "UpButton",
        UDim2.new(0.85, -40, 0, 105),
        UDim2.new(0, 70, 0, 70),
        Color3.fromRGB(0, 128, 255),
        "UP",
        function(pressed)
            buttonStates.up = pressed
            updateMoveDirection()
        end
    )
    upButton.Parent = controlsPanel
    
    -- Down
    local downButton, downStroke = createDraggableButton(
        "DownButton",
        UDim2.new(0.15, -30, 0, 105),
        UDim2.new(0, 70, 0, 70),
        Color3.fromRGB(0, 128, 255),
        "DOWN",
        function(pressed)
            buttonStates.down = pressed
            updateMoveDirection()
        end
    )
    downButton.Parent = controlsPanel
    
    -- Make the panels draggable
    makeFrameDraggable(mainPanel)
    makeFrameDraggable(controlsPanel)
    
    controlGui.Parent = player.PlayerGui
    controlGui.Enabled = false
end

-- Function to make a frame draggable
function makeFrameDraggable(frame)
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end
    
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateInput(input)
        end
    end)
end

-- Update move direction based on button states
function updateMoveDirection()
    moveDirection = Vector3.new(0, 0, 0)
    
    if buttonStates.forward then
        moveDirection = moveDirection + Vector3.new(0, 0, -1)
    end
    if buttonStates.backward then
        moveDirection = moveDirection + Vector3.new(0, 0, 1)
    end
    if buttonStates.left then
        moveDirection = moveDirection + Vector3.new(-1, 0, 0)
    end
    if buttonStates.right then
        moveDirection = moveDirection + Vector3.new(1, 0, 0)
    end
    if buttonStates.up then
        moveDirection = moveDirection + Vector3.new(0, 1, 0)
    end
    if buttonStates.down then
        moveDirection = moveDirection + Vector3.new(0, -1, 0)
    end
    
    isMoving = moveDirection.Magnitude > 0
end

-- Handle keyboard input for backward compatibility
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    -- Toggle flying with F key
    if input.KeyCode == Enum.KeyCode.F then
        toggleFly()
    end
    
    if flyEnabled then
        -- Movement keys
        if input.KeyCode == Enum.KeyCode.W then
            buttonStates.forward = true
            updateMoveDirection()
        elseif input.KeyCode == Enum.KeyCode.S then
            buttonStates.backward = true
            updateMoveDirection()
        elseif input.KeyCode == Enum.KeyCode.A then
            buttonStates.left = true
            updateMoveDirection()
        elseif input.KeyCode == Enum.KeyCode.D then
            buttonStates.right = true
            updateMoveDirection()
        elseif input.KeyCode == Enum.KeyCode.Space then
            buttonStates.up = true
            updateMoveDirection()
        elseif input.KeyCode == Enum.KeyCode.LeftShift then
            buttonStates.down = true
            updateMoveDirection()
        end
    end
end)

-- Handle keyboard input ended
UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if flyEnabled then
        -- Movement keys
        if input.KeyCode == Enum.KeyCode.W then
            buttonStates.forward = false
            updateMoveDirection()
        elseif input.KeyCode == Enum.KeyCode.S then
            buttonStates.backward = false
            updateMoveDirection()
        elseif input.KeyCode == Enum.KeyCode.A then
            buttonStates.left = false
            updateMoveDirection()
        elseif input.KeyCode == Enum.KeyCode.D then
            buttonStates.right = false
            updateMoveDirection()
        elseif input.KeyCode == Enum.KeyCode.Space then
            buttonStates.up = false
            updateMoveDirection()
        elseif input.KeyCode == Enum.KeyCode.LeftShift then
            buttonStates.down = false
            updateMoveDirection()
        end
    end
end)

-- Main flying loop
RunService.RenderStepped:Connect(function()
    if not flyEnabled then return end
    
    -- Get camera direction
    local camera = workspace.CurrentCamera
    local cameraDirection = camera.CFrame.LookVector
    local cameraRight = camera.CFrame.RightVector
    
    -- Calculate movement direction relative to camera
    local direction = (cameraDirection * -moveDirection.Z) + 
                     (cameraRight * moveDirection.X) + 
                     (Vector3.new(0, 1, 0) * moveDirection.Y)
    
    if direction.Magnitude > 0 then
        direction = direction.Unit
    end
    
    -- Move the character
    if isMoving then
        rootPart.CFrame = rootPart.CFrame + direction * (flySpeed / 10)
    end
end)

-- Handle character respawn
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    rootPart = character:WaitForChild("HumanoidRootPart")
    
    -- Reset flying state
    flyEnabled = false
    moveDirection = Vector3.new(0, 0, 0)
    isMoving = false
    
    -- Reset button states
    for key, _ in pairs(buttonStates) do
        buttonStates[key] = false
    end
    
    -- Hide control GUI
    if player.PlayerGui:FindFirstChild("FlyControlGui") then
        player.PlayerGui.FlyControlGui.Enabled = false
    end
end)

-- Create the control GUI on script load
createControlGui()

-- Show a button to open the controls if they're closed
local function createOpenButton()
    local openButton = Instance.new("TextButton")
    openButton.Name = "OpenFlyControlsButton"
    openButton.Size = UDim2.new(0, 50, 0, 50)
    openButton.Position = UDim2.new(0.9, -25, 0.1, 0)
    openButton.BackgroundColor3 = Color3.fromRGB(0, 0, 255)
    openButton.BackgroundTransparency = 0.3
    openButton.Text = "âï¸"
    openButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    openButton.Font = Enum.Font.GothamBold
    openButton.TextSize = 24
    openButton.BorderSizePixel = 0
    openButton.AutoButtonColor = true
    
    -- Add rounded corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0.5, 0)
    uiCorner.Parent = openButton
    
    -- Add stroke
    local uiStroke = Instance.new("UIStroke")
    uiStroke.Thickness = 2
    uiStroke.Color = Color3.fromRGB(255, 255, 255)
    uiStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    uiStroke.Parent = openButton
    
    -- Apply rainbow effect
    applyRainbowEffect(uiStroke)
    
    -- Make draggable
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    openButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                -- Show the fly controls
                if player.PlayerGui:FindFirstChild("FlyControlGui") then
                    player.PlayerGui.FlyControlGui.Enabled = true
                else
                    createControlGui()
                    player.PlayerGui.FlyControlGui.Enabled = true
                end
            end
            
            dragging = true
            dragStart = input.Position
            startPos = openButton.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    RunService.RenderStepped:Connect(function()
        if dragging and openButton.Parent ~= nil then
            local delta = dragInput.Position - dragStart
            openButton.Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X, 
                startPos.Y.Scale, 
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    -- Add hover effect
    openButton.MouseEnter:Connect(function()
        openButton.BackgroundTransparency = 0.1
    end)
    
    openButton.MouseLeave:Connect(function()
        openButton.BackgroundTransparency = 0.3
    end)
    
    local openGui = Instance.new("ScreenGui")
    openGui.Name = "OpenFlyControlsGui"
    openGui.ResetOnSpawn = false
    openGui.Parent = player.PlayerGui
    
    openButton.Parent = openGui
end

-- Create the open button
createOpenButton()

-- Initial notification
game.StarterGui:SetCore("SendNotification", {
    Title = "Flying Script Loaded",
    Text = "Press F or use the on-screen buttons to control flying",
    Duration = 5
})

