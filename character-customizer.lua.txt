-- Character Customizer Script for Roblox
-- Place this in a LocalScript inside StarterPlayerScripts

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Settings
local selectedPart = nil
local clonedParts = {}
local hiddenParts = {}
local originalSizes = {}
local originalPositions = {}
local originalCanCollide = {}

-- Rainbow colors for visual effects
local rainbowColors = {
    Color3.fromRGB(255, 0, 0),   -- Red
    Color3.fromRGB(255, 127, 0), -- Orange
    Color3.fromRGB(255, 255, 0), -- Yellow
    Color3.fromRGB(0, 255, 0),   -- Green
    Color3.fromRGB(0, 255, 255), -- Cyan
    Color3.fromRGB(0, 0, 255),   -- Blue
    Color3.fromRGB(139, 0, 255)  -- Purple
}

-- Function to apply rainbow effect to a UIStroke
local function applyRainbowEffect(uiStroke)
    task.spawn(function()
        local index = 1
        while uiStroke and uiStroke.Parent do
            local nextColor = rainbowColors[index]
            local tween = TweenService:Create(uiStroke, TweenInfo.new(0.5, Enum.EasingStyle.Linear), {Color = nextColor})
            tween:Play()
            task.wait(0.5)
            
            index = index % #rainbowColors + 1
        end
    end)
end

-- Function to make a frame draggable
local function makeFrameDraggable(frame)
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end
    
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateInput(input)
        end
    end)
end

-- Function to create a button
local function createButton(name, position, size, color, text, callback)
    local button = Instance.new("TextButton")
    button.Name = name
    button.Size = size
    button.Position = position
    button.BackgroundColor3 = color
    button.BackgroundTransparency = 0.3
    button.Text = text
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.GothamBold
    button.TextSize = 14
    button.BorderSizePixel = 0
    button.AutoButtonColor = true
    
    -- Add rounded corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0.2, 0)
    uiCorner.Parent = button
    
    -- Add stroke (border)
    local uiStroke = Instance.new("UIStroke")
    uiStroke.Thickness = 2
    uiStroke.Color = Color3.fromRGB(255, 255, 255)
    uiStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    uiStroke.Parent = button
    
    -- Add click handler
    button.MouseButton1Click:Connect(function()
        callback()
    end)
    
    -- Add hover effect for PC users
    button.MouseEnter:Connect(function()
        button.BackgroundTransparency = 0.1
    end)
    
    button.MouseLeave:Connect(function()
        button.BackgroundTransparency = 0.3
    end)
    
    return button, uiStroke
end

-- Function to create a text box
local function createTextBox(name, position, size, placeholderText)
    local textBox = Instance.new("TextBox")
    textBox.Name = name
    textBox.Size = size
    textBox.Position = position
    textBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    textBox.BackgroundTransparency = 0.3
    textBox.PlaceholderText = placeholderText
    textBox.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
    textBox.Text = ""
    textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    textBox.Font = Enum.Font.GothamSemibold
    textBox.TextSize = 14
    textBox.BorderSizePixel = 0
    textBox.ClearTextOnFocus = false
    
    -- Add rounded corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0.1, 0)
    uiCorner.Parent = textBox
    
    -- Add stroke
    local uiStroke = Instance.new("UIStroke")
    uiStroke.Thickness = 2
    uiStroke.Color = Color3.fromRGB(100, 100, 100)
    uiStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    uiStroke.Parent = textBox
    
    return textBox, uiStroke
end

-- Function to highlight the selected part
local function highlightPart(part)
    -- Remove any existing highlights
    for _, descendant in pairs(character:GetDescendants()) do
        if descendant:IsA("BasePart") and descendant:FindFirstChild("SelectionHighlight") then
            descendant.SelectionHighlight:Destroy()
        end
    end
    
    if part then
        -- Create a highlight effect
        local highlight = Instance.new("SelectionBox")
        highlight.Name = "SelectionHighlight"
        highlight.Adornee = part
        highlight.Color3 = Color3.fromRGB(0, 255, 0)
        highlight.LineThickness = 0.05
        highlight.Parent = part
    end
end

-- Function to select a part
local function selectPart(part)
    selectedPart = part
    highlightPart(part)
    
    -- Update the size text box with current size
    if part and player.PlayerGui:FindFirstChild("CharacterCustomizerGui") then
        local sizeTextBox = player.PlayerGui.CharacterCustomizerGui.MainPanel.SizeTextBox
        local size = part.Size
        sizeTextBox.Text = string.format("%.2f,%.2f,%.2f", size.X, size.Y, size.Z)
        
        -- Store original properties if not already stored
        if not originalSizes[part] then
            originalSizes[part] = part.Size
            originalPositions[part] = part.Position
            originalCanCollide[part] = part.CanCollide
        end
    end
end

-- Function to resize the selected part
local function resizePart(sizeString)
    if not selectedPart then return end
    
    -- Parse the size string (format: "X,Y,Z")
    local sizeComponents = string.split(sizeString, ",")
    if #sizeComponents ~= 3 then
        -- Invalid format
        return
    end
    
    local x = tonumber(sizeComponents[1])
    local y = tonumber(sizeComponents[2])
    local z = tonumber(sizeComponents[3])
    
    if not x or not y or not z then
        -- Invalid numbers
        return
    end
    
    -- Apply the new size
    local newSize = Vector3.new(x, y, z)
    
    -- Use tweening for smooth transition
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingStyle.Out)
    local tween = TweenService:Create(selectedPart, tweenInfo, {Size = newSize})
    tween:Play()
end

-- Function to toggle collision for the selected part
local function toggleCollision()
    if not selectedPart then return end
    
    selectedPart.CanCollide = not selectedPart.CanCollide
    
    -- Notification
    game.StarterGui:SetCore("SendNotification", {
        Title = "Collision " .. (selectedPart.CanCollide and "Enabled" or "Disabled"),
        Text = "For part: " .. selectedPart.Name,
        Duration = 2
    })
end

-- Function to temporarily hide the selected part
local function toggleHidePart()
    if not selectedPart then return end
    
    if hiddenParts[selectedPart] then
        -- Unhide the part
        selectedPart.Transparency = hiddenParts[selectedPart]
        hiddenParts[selectedPart] = nil
        
        -- Notification
        game.StarterGui:SetCore("SendNotification", {
            Title = "Part Unhidden",
            Text = "Part: " .. selectedPart.Name,
            Duration = 2
        })
    else
        -- Hide the part
        hiddenParts[selectedPart] = selectedPart.Transparency
        selectedPart.Transparency = 1
        
        -- Notification
        game.StarterGui:SetCore("SendNotification", {
            Title = "Part Hidden",
            Text = "Part: " .. selectedPart.Name,
            Duration = 2
        })
    end
end

-- Function to clone the selected part
local function clonePart()
    if not selectedPart then return end
    
    -- Check if this part has already been cloned
    if clonedParts[selectedPart] then
        -- Notification
        game.StarterGui:SetCore("SendNotification", {
            Title = "Already Cloned",
            Text = "This part has already been cloned",
            Duration = 2
        })
        return
    end
    
    -- Create a clone
    local clone = selectedPart:Clone()
    clone.Name = selectedPart.Name .. "_Clone"
    clone.Parent = character
    
    -- Make the clone slightly offset and different color
    clone.Position = selectedPart.Position + Vector3.new(0, 0.5, 0)
    clone.Color = Color3.fromRGB(
        math.random(0, 255),
        math.random(0, 255),
        math.random(0, 255)
    )
    
    -- Store the clone
    clonedParts[selectedPart] = clone
    
    -- Notification
    game.StarterGui:SetCore("SendNotification", {
        Title = "Part Cloned",
        Text = "Created: " .. clone.Name,
        Duration = 2
    })
    
    -- Select the new clone
    selectPart(clone)
end

-- Function to reset the selected part to its original state
local function resetPart()
    if not selectedPart then return end
    
    if originalSizes[selectedPart] then
        -- Reset size and position
        local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingStyle.Out)
        local tween = TweenService:Create(selectedPart, tweenInfo, {
            Size = originalSizes[selectedPart],
            Position = originalPositions[selectedPart]
        })
        tween:Play()
        
        -- Reset collision
        selectedPart.CanCollide = originalCanCollide[selectedPart]
        
        -- Reset transparency if hidden
        if hiddenParts[selectedPart] then
            selectedPart.Transparency = hiddenParts[selectedPart]
            hiddenParts[selectedPart] = nil
        end
        
        -- Notification
        game.StarterGui:SetCore("SendNotification", {
            Title = "Part Reset",
            Text = "Part: " .. selectedPart.Name,
            Duration = 2
        })
    end
end

-- Function to reset all parts
local function resetAllParts()
    for part, originalSize in pairs(originalSizes) do
        if part and part.Parent then
            -- Reset size and position
            local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingStyle.Out)
            local tween = TweenService:Create(part, tweenInfo, {
                Size = originalSize,
                Position = originalPositions[part]
            })
            tween:Play()
            
            -- Reset collision
            part.CanCollide = originalCanCollide[part]
            
            -- Reset transparency if hidden
            if hiddenParts[part] then
                part.Transparency = hiddenParts[part]
                hiddenParts[part] = nil
            end
        end
    end
    
    -- Remove all clones
    for _, clone in pairs(clonedParts) do
        if clone and clone.Parent then
            clone:Destroy()
        end
    end
    
    -- Clear tables
    clonedParts = {}
    
    -- Notification
    game.StarterGui:SetCore("SendNotification", {
        Title = "All Parts Reset",
        Text = "Character restored to original state",
        Duration = 2
    })
end

-- Function to create the part selection panel
local function createPartSelectionPanel(parent)
    local partSelectionPanel = Instance.new("Frame")
    partSelectionPanel.Name = "PartSelectionPanel"
    partSelectionPanel.Size = UDim2.new(0, 200, 0, 300)
    partSelectionPanel.Position = UDim2.new(0, -210, 0, 0)
    partSelectionPanel.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
    partSelectionPanel.BackgroundTransparency = 0.3
    partSelectionPanel.BorderSizePixel = 0
    partSelectionPanel.Visible = false
    partSelectionPanel.Parent = parent
    
    -- Add rounded corners
    local panelCorner = Instance.new("UICorner")
    panelCorner.CornerRadius = UDim.new(0.05, 0)
    panelCorner.Parent = partSelectionPanel
    
    -- Add stroke
    local panelStroke = Instance.new("UIStroke")
    panelStroke.Thickness = 3
    panelStroke.Color = Color3.fromRGB(0, 200, 255)
    panelStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    panelStroke.Parent = partSelectionPanel
    
    -- Apply rainbow effect
    applyRainbowEffect(panelStroke)
    
    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, 0, 0, 30)
    titleLabel.Position = UDim2.new(0, 0, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "SELECT BODY PART"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 16
    titleLabel.Parent = partSelectionPanel
    
    -- Close button
    local closeButton, closeStroke = createButton(
        "CloseButton",
        UDim2.new(1, -35, 0, 5),
        UDim2.new(0, 30, 0, 30),
        Color3.fromRGB(200, 0, 0),
        "X",
        function()
            partSelectionPanel.Visible = false
        end
    )
    closeButton.Parent = partSelectionPanel
    
    -- Scrolling frame for parts
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Name = "PartsScrollFrame"
    scrollFrame.Size = UDim2.new(1, -20, 1, -50)
    scrollFrame.Position = UDim2.new(0, 10, 0, 40)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 6
    scrollFrame.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0) -- Will be updated dynamically
    scrollFrame.Parent = partSelectionPanel
    
    -- Populate with character parts
    local yOffset = 0
    local buttonHeight = 40
    local buttonSpacing = 5
    
    -- Get all parts from the character
    local parts = {}
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
            table.insert(parts, part)
        end
    end
    
    -- Sort parts by name for easier navigation
    table.sort(parts, function(a, b)
        return a.Name < b.Name
    end)
    
    -- Create buttons for each part
    for i, part in ipairs(parts) do
        local partButton, partStroke = createButton(
            "PartButton_" .. part.Name,
            UDim2.new(0, 0, 0, yOffset),
            UDim2.new(1, -10, 0, buttonHeight),
            Color3.fromRGB(60, 60, 60),
            part.Name,
            function()
                selectPart(part)
                partSelectionPanel.Visible = false
            end
        )
        partButton.Parent = scrollFrame
        
        yOffset = yOffset + buttonHeight + buttonSpacing
    end
    
    -- Update canvas size
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, yOffset)
    
    -- Make the panel draggable
    makeFrameDraggable(partSelectionPanel)
    
    return partSelectionPanel
end

-- Create the main customizer GUI
local function createCustomizerGui()
    local customizerGui = Instance.new("ScreenGui")
    customizerGui.Name = "CharacterCustomizerGui"
    customizerGui.ResetOnSpawn = false
    
    -- Main panel
    local mainPanel = Instance.new("Frame")
    mainPanel.Name = "MainPanel"
    mainPanel.Size = UDim2.new(0, 300, 0, 350)
    mainPanel.Position = UDim2.new(0.5, -150, 0.5, -175)
    mainPanel.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
    mainPanel.BackgroundTransparency = 0.3
    mainPanel.BorderSizePixel = 0
    mainPanel.Parent = customizerGui
    
    -- Add rounded corners
    local panelCorner = Instance.new("UICorner")
    panelCorner.CornerRadius = UDim.new(0.05, 0)
    panelCorner.Parent = mainPanel
    
    -- Add stroke
    local panelStroke = Instance.new("UIStroke")
    panelStroke.Thickness = 3
    panelStroke.Color = Color3.fromRGB(255, 0, 0)
    panelStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    panelStroke.Parent = mainPanel
    
    -- Apply rainbow effect
    applyRainbowEffect(panelStroke)
    
    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, 0, 0, 30)
    titleLabel.Position = UDim2.new(0, 0, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "CHARACTER CUSTOMIZER"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 20
    titleLabel.Parent = mainPanel
    
    -- Close button
    local closeButton, closeStroke = createButton(
        "CloseButton",
        UDim2.new(1, -35, 0, 5),
        UDim2.new(0, 30, 0, 30),
        Color3.fromRGB(200, 0, 0),
        "X",
        function()
            customizerGui.Enabled = false
        end
    )
    closeButton.Parent = mainPanel
    
    -- Selected part label
    local selectedPartLabel = Instance.new("TextLabel")
    selectedPartLabel.Name = "SelectedPartLabel"
    selectedPartLabel.Size = UDim2.new(1, -20, 0, 30)
    selectedPartLabel.Position = UDim2.new(0, 10, 0, 40)
    selectedPartLabel.BackgroundTransparency = 1
    selectedPartLabel.Text = "Selected Part: None"
    selectedPartLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    selectedPartLabel.Font = Enum.Font.GothamSemibold
    selectedPartLabel.TextSize = 16
    selectedPartLabel.TextXAlignment = Enum.TextXAlignment.Left
    selectedPartLabel.Parent = mainPanel
    
    -- Select part button
    local selectPartButton, selectPartStroke = createButton(
        "SelectPartButton",
        UDim2.new(0, 10, 0, 80),
        UDim2.new(1, -20, 0, 40),
        Color3.fromRGB(0, 120, 255),
        "SELECT BODY PART",
        function()
            mainPanel.PartSelectionPanel.Visible = true
        end
    )
    selectPartButton.Parent = mainPanel
    
    -- Size text box label
    local sizeLabel = Instance.new("TextLabel")
    sizeLabel.Name = "SizeLabel"
    sizeLabel.Size = UDim2.new(1, -20, 0, 20)
    sizeLabel.Position = UDim2.new(0, 10, 0, 130)
    sizeLabel.BackgroundTransparency = 1
    sizeLabel.Text = "Size (X,Y,Z):"
    sizeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    sizeLabel.Font = Enum.Font.GothamSemibold
    sizeLabel.TextSize = 14
    sizeLabel.TextXAlignment = Enum.TextXAlignment.Left
    sizeLabel.Parent = mainPanel
    
    -- Size text box
    local sizeTextBox, sizeStroke = createTextBox(
        "SizeTextBox",
        UDim2.new(0, 10, 0, 155),
        UDim2.new(1, -20, 0, 30),
        "Enter size (X,Y,Z)"
    )
    sizeTextBox.Parent = mainPanel
    
    -- Apply size button
    local applySizeButton, applySizeStroke = createButton(
        "ApplySizeButton",
        UDim2.new(0, 10, 0, 195),
        UDim2.new(1, -20, 0, 30),
        Color3.fromRGB(0, 200, 0),
        "APPLY SIZE",
        function()
            resizePart(sizeTextBox.Text)
        end
    )
    applySizeButton.Parent = mainPanel
    
    -- Custom name text box label
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Name = "NameLabel"
    nameLabel.Size = UDim2.new(1, -20, 0, 20)
    nameLabel.Position = UDim2.new(0, 10, 0, 235)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = "Custom Name:"
    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    nameLabel.Font = Enum.Font.GothamSemibold
    nameLabel.TextSize = 14
    nameLabel.TextXAlignment = Enum.TextXAlignment.Left
    nameLabel.Parent = mainPanel
    
    -- Custom name text box
    local nameTextBox, nameStroke = createTextBox(
        "NameTextBox",
        UDim2.new(0, 10, 0, 260),
        UDim2.new(1, -20, 0, 30),
        "Enter custom name"
    )
    nameTextBox.Parent = mainPanel
    
    -- Action buttons
    local toggleCollisionButton, toggleCollisionStroke = createButton(
        "ToggleCollisionButton",
        UDim2.new(0, 10, 0, 300),
        UDim2.new(0.3, -15, 0, 40),
        Color3.fromRGB(255, 165, 0),
        "COLLISION",
        toggleCollision
    )
    toggleCollisionButton.Parent = mainPanel
    
    local hidePartButton, hidePartStroke = createButton(
        "HidePartButton",
        UDim2.new(0.35, 0, 0, 300),
        UDim2.new(0.3, -5, 0, 40),
        Color3.fromRGB(255, 0, 255),
        "HIDE",
        toggleHidePart
    )
    hidePartButton.Parent = mainPanel
    
    local clonePartButton, clonePartStroke = createButton(
        "ClonePartButton",
        UDim2.new(0.7, 0, 0, 300),
        UDim2.new(0.3, -10, 0, 40),
        Color3.fromRGB(0, 255, 255),
        "CLONE",
        clonePart
    )
    clonePartButton.Parent = mainPanel
    
    -- Reset buttons
    local resetPartButton, resetPartStroke = createButton(
        "ResetPartButton",
        UDim2.new(0, 10, 0, 350),
        UDim2.new(0.5, -15, 0, 40),
        Color3.fromRGB(200, 0, 0),
        "RESET PART",
        resetPart
    )
    resetPartButton.Parent = mainPanel
    
    local resetAllButton, resetAllStroke = createButton(
        "ResetAllButton",
        UDim2.new(0.5, 5, 0, 350),
        UDim2.new(0.5, -15, 0, 40),
        Color3.fromRGB(255, 0, 0),
        "RESET ALL",
        resetAllParts
    )
    resetAllButton.Parent = mainPanel
    
    -- Create part selection panel
    local partSelectionPanel = createPartSelectionPanel(mainPanel)
    
    -- Make the main panel draggable
    makeFrameDraggable(mainPanel)
    
    -- Update selected part label when a part is selected
    RunService.RenderStepped:Connect(function()
        if selectedPart and selectedPart.Parent then
            selectedPartLabel.Text = "Selected Part: " .. selectedPart.Name
        else
            selectedPartLabel.Text = "Selected Part: None"
            selectedPart = nil
        end
    end)
    
    -- Handle text box submission
    sizeTextBox.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            resizePart(sizeTextBox.Text)
        end
    end)
    
    nameTextBox.FocusLost:Connect(function(enterPressed)
        if enterPressed and selectedPart then
            local newName = nameTextBox.Text
            if newName ~= "" then
                selectedPart.Name = newName
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Part Renamed",
                    Text = "New name: " .. newName,
                    Duration = 2
                })
            end
        end
    end)
    
    customizerGui.Parent = player.PlayerGui
    return customizerGui
end

-- Function to create a button to open the customizer
local function createOpenButton()
    local openButton = Instance.new("TextButton")
    openButton.Name = "OpenCustomizerButton"
    openButton.Size = UDim2.new(0, 50, 0, 50)
    openButton.Position = UDim2.new(0.1, -25, 0.1, 0)
    openButton.BackgroundColor3 = Color3.fromRGB(0, 100, 255)
    openButton.BackgroundTransparency = 0.3
    openButton.Text = "👤"
    openButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    openButton.Font = Enum.Font.GothamBold
    openButton.TextSize = 24
    openButton.BorderSizePixel = 0
    openButton.AutoButtonColor = true
    
    -- Add rounded corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0.5, 0)
    uiCorner.Parent = openButton
    
    -- Add stroke
    local uiStroke = Instance.new("UIStroke")
    uiStroke.Thickness = 2
    uiStroke.Color = Color3.fromRGB(255, 255, 255)
    uiStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    uiStroke.Parent = openButton
    
    -- Apply rainbow effect
    applyRainbowEffect(uiStroke)
    
    openButton.MouseButton1Click:Connect(function()
        -- Show the customizer GUI
        if player.PlayerGui:FindFirstChild("CharacterCustomizerGui") then
            player.PlayerGui.CharacterCustomizerGui.Enabled = true
        else
            createCustomizerGui()
        end
    end)
    
    local openGui = Instance.new("ScreenGui")
    openGui.Name = "OpenCustomizerGui"
    openGui.ResetOnSpawn = false
    openGui.Parent = player.PlayerGui
    
    -- Make the open button draggable
    makeFrameDraggable(openButton)
    
    openButton.Parent = openGui
end

-- Function to handle character changes
local function handleCharacterAdded(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    
    -- Reset variables
    selectedPart = nil
    clonedParts = {}
    hiddenParts = {}
    originalSizes = {}
    originalPositions = {}
    originalCanCollide = {}
    
    -- Remove highlight if any
    highlightPart(nil)
end

-- Listen for character changes
player.CharacterAdded:Connect(handleCharacterAdded)

-- Create the open button
createOpenButton()

-- Initial notification
game.StarterGui:SetCore("SendNotification", {
    Title = "Character Customizer Loaded",
    Text = "Click the 👤 button to open the customizer",
    Duration = 5
})

