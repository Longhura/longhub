-- Player Teleporter and Flyer Script for Roblox (Fixed Version)
-- Place this in a LocalScript inside StarterPlayerScripts

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildOfClass("Humanoid")
local rootPart = character:FindFirstChild("HumanoidRootPart")

-- Settings
local selectedPlayer = nil
local teleportSpeed = 50
local flySpeed = 50
local maxSpeed = 200
local minSpeed = 10
local speedIncrement = 5
local positionOffset = Vector3.new(0, 0, 0)
local autoTeleporting = false
local autoFlying = false
local flyEnabled = false
local teleporterGui = nil
local openGui = nil

-- Rainbow colors for visual effects
local rainbowColors = {
    Color3.fromRGB(255, 0, 0),   -- Red
    Color3.fromRGB(255, 127, 0), -- Orange
    Color3.fromRGB(255, 255, 0), -- Yellow
    Color3.fromRGB(0, 255, 0),   -- Green
    Color3.fromRGB(0, 255, 255), -- Cyan
    Color3.fromRGB(0, 0, 255),   -- Blue
    Color3.fromRGB(139, 0, 255)  -- Purple
}

-- Function to apply rainbow effect to a UIStroke
local function applyRainbowEffect(uiStroke)
    task.spawn(function()
        local index = 1
        while uiStroke and uiStroke.Parent do
            local nextColor = rainbowColors[index]
            local tween = TweenService:Create(uiStroke, TweenInfo.new(0.5, Enum.EasingStyle.Linear), {Color = nextColor})
            tween:Play()
            task.wait(0.5)
            
            index = index % #rainbowColors + 1
        end
    end)
end

-- Function to make a frame draggable
local function makeFrameDraggable(frame)
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end
    
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging and frame and frame.Parent then
            updateInput(input)
        end
    end)
end

-- Function to create a button
local function createButton(name, position, size, color, text, callback)
    local button = Instance.new("TextButton")
    button.Name = name
    button.Size = size
    button.Position = position
    button.BackgroundColor3 = color
    button.BackgroundTransparency = 0.3
    button.Text = text
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.GothamBold
    button.TextSize = 14
    button.BorderSizePixel = 0
    button.AutoButtonColor = true
    
    -- Add rounded corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0.2, 0)
    uiCorner.Parent = button
    
    -- Add stroke (border)
    local uiStroke = Instance.new("UIStroke")
    uiStroke.Thickness = 2
    uiStroke.Color = Color3.fromRGB(255, 255, 255)
    uiStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    uiStroke.Parent = button
    
    -- Add click handler
    button.MouseButton1Click:Connect(function()
        callback()
    end)
    
    -- Add hover effect for PC users
    button.MouseEnter:Connect(function()
        button.BackgroundTransparency = 0.1
    end)
    
    button.MouseLeave:Connect(function()
        button.BackgroundTransparency = 0.3
    end)
    
    return button, uiStroke
end

-- Function to create a text box
local function createTextBox(name, position, size, placeholderText)
    local textBox = Instance.new("TextBox")
    textBox.Name = name
    textBox.Size = size
    textBox.Position = position
    textBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    textBox.BackgroundTransparency = 0.3
    textBox.PlaceholderText = placeholderText
    textBox.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
    textBox.Text = ""
    textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    textBox.Font = Enum.Font.GothamSemibold
    textBox.TextSize = 14
    textBox.BorderSizePixel = 0
    textBox.ClearTextOnFocus = false
    
    -- Add rounded corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0.1, 0)
    uiCorner.Parent = textBox
    
    -- Add stroke
    local uiStroke = Instance.new("UIStroke")
    uiStroke.Thickness = 2
    uiStroke.Color = Color3.fromRGB(100, 100, 100)
    uiStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    uiStroke.Parent = textBox
    
    return textBox, uiStroke
end

-- Function to get a player's character and root part safely
local function getPlayerRootPart(targetPlayer)
    if not targetPlayer or not targetPlayer.Parent then return nil end
    
    local targetCharacter = targetPlayer.Character
    if not targetCharacter or not targetCharacter.Parent then return nil end
    
    local targetRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")
    if not targetRootPart then return nil end
    
    return targetRootPart
end

-- Function to get our own character and root part safely
local function getOwnRootPart()
    if not player then return nil end
    
    local ownCharacter = player.Character
    if not ownCharacter or not ownCharacter.Parent then return nil end
    
    local ownRootPart = ownCharacter:FindFirstChild("HumanoidRootPart")
    if not ownRootPart then return nil end
    
    return ownRootPart
end

-- Primary teleport function (using CFrame)
local function teleportToCFrame(targetPosition)
    local ownRootPart = getOwnRootPart()
    if not ownRootPart then return false end
    
    -- Try to teleport using CFrame
    local success, errorMsg = pcall(function()
        ownRootPart.CFrame = CFrame.new(targetPosition)
    end)
    
    return success
end

-- Secondary teleport function (using TweenService)
local function teleportToTween(targetPosition)
    local ownRootPart = getOwnRootPart()
    if not ownRootPart then return false end
    
    -- Calculate distance for tween duration
    local distance = (targetPosition - ownRootPart.Position).Magnitude
    local duration = distance / teleportSpeed
    
    -- Limit duration to prevent extremely long tweens
    duration = math.min(duration, 10)
    
    -- Create and play tween
    local success, errorMsg = pcall(function()
        local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
        local tween = TweenService:Create(ownRootPart, tweenInfo, {CFrame = CFrame.new(targetPosition)})
        tween:Play()
        
        -- Wait for tween to complete
        tween.Completed:Wait()
    end)
    
    return success
end

-- Tertiary teleport function (using velocity)
local function teleportToVelocity(targetPosition)
    local ownRootPart = getOwnRootPart()
    if not ownRootPart then return false end
    
    -- Calculate direction and distance
    local direction = (targetPosition - ownRootPart.Position).Unit
    local distance = (targetPosition - ownRootPart.Position).Magnitude
    
    -- Apply velocity in the direction of the target
    local success, errorMsg = pcall(function()
        ownRootPart.Velocity = direction * teleportSpeed
        
        -- Wait for approximate arrival time
        local arrivalTime = distance / teleportSpeed
        task.wait(arrivalTime)
        
        -- Stop movement
        ownRootPart.Velocity = Vector3.new(0, 0, 0)
        
        -- Final position adjustment
        ownRootPart.CFrame = CFrame.new(targetPosition)
    end)
    
    return success
end

-- Fourth teleport method (using character:MoveTo)
local function teleportToMoveTo(targetPosition)
    if not player or not player.Character then return false end
    
    local success, errorMsg = pcall(function()
        player.Character:MoveTo(targetPosition)
    end)
    
    return success
end

-- Main teleport function that tries all methods
local function teleportToPlayer(targetPlayer)
    if not targetPlayer or not targetPlayer.Parent then
        game.StarterGui:SetCore("SendNotification", {
            Title = "Teleport Failed",
            Text = "Selected player is not valid",
            Duration = 2
        })
        return false
    end
    
    local targetRootPart = getPlayerRootPart(targetPlayer)
    if not targetRootPart then
        game.StarterGui:SetCore("SendNotification", {
            Title = "Teleport Failed",
            Text = "Cannot find target player's position",
            Duration = 2
        })
        return false
    end
    
    local targetPosition = targetRootPart.Position + positionOffset
    
    -- Try primary method
    local success = teleportToCFrame(targetPosition)
    if success then return true end
    
    -- Try secondary method if primary fails
    success = teleportToTween(targetPosition)
    if success then return true end
    
    -- Try tertiary method if secondary fails
    success = teleportToVelocity(targetPosition)
    if success then return true end
    
    -- Try fourth method if tertiary fails
    success = teleportToMoveTo(targetPosition)
    
    if not success then
        game.StarterGui:SetCore("SendNotification", {
            Title = "Teleport Failed",
            Text = "All teleport methods failed",
            Duration = 2
        })
    end
    
    return success
end

-- Primary fly function
local function flyToPlayer(targetPlayer)
    if not targetPlayer or not targetPlayer.Parent then
        game.StarterGui:SetCore("SendNotification", {
            Title = "Fly Failed",
            Text = "Selected player is not valid",
            Duration = 2
        })
        return false
    end
    
    local targetRootPart = getPlayerRootPart(targetPlayer)
    if not targetRootPart then
        game.StarterGui:SetCore("SendNotification", {
            Title = "Fly Failed",
            Text = "Cannot find target player's position",
            Duration = 2
        })
        return false
    end
    
    local ownRootPart = getOwnRootPart()
    if not ownRootPart then return false end
    
    -- Enable flying if not already enabled
    if not flyEnabled then
        -- Enable flying
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            pcall(function()
                humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            end)
        end
        
        pcall(function()
            ownRootPart.Anchored = true
        end)
        
        flyEnabled = true
    end
    
    -- Calculate direction and distance
    local targetPosition = targetRootPart.Position + positionOffset
    local direction = (targetPosition - ownRootPart.Position).Unit
    local distance = (targetPosition - ownRootPart.Position).Magnitude
    
    -- Move towards target
    if distance > 5 then -- Only move if we're not already close
        pcall(function()
            ownRootPart.CFrame = ownRootPart.CFrame + direction * (flySpeed / 10)
        end)
        return true
    else
        -- We've reached the target
        return false
    end
end

-- Secondary fly function (backup method)
local function flyToPlayerBackup(targetPlayer)
    if not targetPlayer or not targetPlayer.Parent then return false end
    
    local targetRootPart = getPlayerRootPart(targetPlayer)
    if not targetRootPart then return false end
    
    local ownRootPart = getOwnRootPart()
    if not ownRootPart then return false end
    
    -- Enable flying if not already enabled
    if not flyEnabled then
        -- Try a different flying method
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            pcall(function()
                humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
            end)
        end
        flyEnabled = true
    end
    
    -- Calculate direction and distance
    local targetPosition = targetRootPart.Position + positionOffset
    local direction = (targetPosition - ownRootPart.Position).Unit
    local distance = (targetPosition - ownRootPart.Position).Magnitude
    
    -- Move towards target using velocity
    if distance > 5 then
        pcall(function()
            ownRootPart.Velocity = direction * flySpeed
        end)
        return true
    else
        pcall(function()
            ownRootPart.Velocity = Vector3.new(0, 0, 0)
        end)
        return false
    end
end

-- Third fly method (using MoveTo)
local function flyToPlayerMoveTo(targetPlayer)
    if not targetPlayer or not targetPlayer.Parent then return false end
    
    local targetRootPart = getPlayerRootPart(targetPlayer)
    if not targetRootPart then return false end
    
    if not player or not player.Character then return false end
    
    -- Calculate target position
    local targetPosition = targetRootPart.Position + positionOffset
    
    -- Move to target
    pcall(function()
        player.Character:MoveTo(targetPosition)
    end)
    
    return true
end

-- Function to disable flying
local function disableFly()
    local ownRootPart = getOwnRootPart()
    if not ownRootPart then return end
    
    -- Disable flying
    pcall(function()
        ownRootPart.Anchored = false
        ownRootPart.Velocity = Vector3.new(0, 0, 0)
    end)
    
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        pcall(function()
            humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
        end)
    end
    
    flyEnabled = false
    autoFlying = false
    
    game.StarterGui:SetCore("SendNotification", {
        Title = "Flying Disabled",
        Text = "Normal movement restored",
        Duration = 2
    })
end

-- Function to update the player list
local function updatePlayerList(scrollFrame)
    -- Clear existing buttons
    for _, child in pairs(scrollFrame:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end
    
    -- Get all players
    local allPlayers = Players:GetPlayers()
    
    -- Sort players by name
    table.sort(allPlayers, function(a, b)
        return a.Name < b.Name
    end)
    
    -- Create buttons for each player
    local yOffset = 0
    local buttonHeight = 40
    local buttonSpacing = 5
    
    for _, otherPlayer in ipairs(allPlayers) do
        -- Skip local player
        if otherPlayer ~= player then
            local playerButton, playerStroke = createButton(
                "PlayerButton_" .. otherPlayer.Name,
                UDim2.new(0, 0, 0, yOffset),
                UDim2.new(1, -10, 0, buttonHeight),
                Color3.fromRGB(60, 60, 60),
                otherPlayer.Name,
                function()
                    selectedPlayer = otherPlayer
                    
                    -- Update selected player label
                    if player.PlayerGui:FindFirstChild("TeleporterGui") and player.PlayerGui.TeleporterGui:FindFirstChild("MainPanel") then
                        local selectedPlayerLabel = player.PlayerGui.TeleporterGui.MainPanel.SelectedPlayerLabel
                        selectedPlayerLabel.Text = "Selected: " .. otherPlayer.Name
                    end
                    
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Player Selected",
                        Text = "Selected: " .. otherPlayer.Name,
                        Duration = 2
                    })
                end
            )
            
            -- Highlight if this is the selected player
            if selectedPlayer == otherPlayer then
                playerButton.BackgroundColor3 = Color3.fromRGB(0, 120, 255)
            end
            
            playerButton.Parent = scrollFrame
            
            yOffset = yOffset + buttonHeight + buttonSpacing
        end
    end
    
    -- Update canvas size
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, yOffset)
end

-- Function to create the player selection panel
local function createPlayerSelectionPanel(parent)
    local playerSelectionPanel = Instance.new("Frame")
    playerSelectionPanel.Name = "PlayerSelectionPanel"
    playerSelectionPanel.Size = UDim2.new(0, 200, 0, 300)
    playerSelectionPanel.Position = UDim2.new(0, -210, 0, 0)
    playerSelectionPanel.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
    playerSelectionPanel.BackgroundTransparency = 0.3
    playerSelectionPanel.BorderSizePixel = 0
    playerSelectionPanel.Visible = false
    playerSelectionPanel.Parent = parent
    
    -- Add rounded corners
    local panelCorner = Instance.new("UICorner")
    panelCorner.CornerRadius = UDim.new(0.05, 0)
    panelCorner.Parent = playerSelectionPanel
    
    -- Add stroke
    local panelStroke = Instance.new("UIStroke")
    panelStroke.Thickness = 3
    panelStroke.Color = Color3.fromRGB(0, 200, 255)
    panelStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    panelStroke.Parent = playerSelectionPanel
    
    -- Apply rainbow effect
    applyRainbowEffect(panelStroke)
    
    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, 0, 0, 30)
    titleLabel.Position = UDim2.new(0, 0, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "SELECT PLAYER"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 16
    titleLabel.Parent = playerSelectionPanel
    
    -- Close button
    local closeButton, closeStroke = createButton(
        "CloseButton",
        UDim2.new(1, -35, 0, 5),
        UDim2.new(0, 30, 0, 30),
        Color3.fromRGB(200, 0, 0),
        "X",
        function()
            playerSelectionPanel.Visible = false
        end
    )
    closeButton.Parent = playerSelectionPanel
    
    -- Refresh button
    local refreshButton, refreshStroke = createButton(
        "RefreshButton",
        UDim2.new(0, 10, 0, 40),
        UDim2.new(1, -20, 0, 30),
        Color3.fromRGB(0, 180, 0),
        "REFRESH LIST",
        function()
            updatePlayerList(playerSelectionPanel.PlayersScrollFrame)
            
            game.StarterGui:SetCore("SendNotification", {
                Title = "Player List Refreshed",
                Text = "Player list has been updated",
                Duration = 2
            })
        end
    )
    refreshButton.Parent = playerSelectionPanel
    
    -- Scrolling frame for players
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Name = "PlayersScrollFrame"
    scrollFrame.Size = UDim2.new(1, -20, 1, -80)
    scrollFrame.Position = UDim2.new(0, 10, 0, 80)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 6
    scrollFrame.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0) -- Will be updated dynamically
    scrollFrame.Parent = playerSelectionPanel
    
    -- Populate with players
    updatePlayerList(scrollFrame)
    
    -- Make the panel draggable
    makeFrameDraggable(playerSelectionPanel)
    
    return playerSelectionPanel
end

-- Create the main teleporter GUI
local function createTeleporterGui()
    -- Remove existing GUI if it exists
    if player.PlayerGui:FindFirstChild("TeleporterGui") then
        player.PlayerGui.TeleporterGui:Destroy()
    end
    
    local teleporterGui = Instance.new("ScreenGui")
    teleporterGui.Name = "TeleporterGui"
    teleporterGui.ResetOnSpawn = false
    
    -- Main panel
    local mainPanel = Instance.new("Frame")
    mainPanel.Name = "MainPanel"
    mainPanel.Size = UDim2.new(0, 300, 0, 400)
    mainPanel.Position = UDim2.new(0.5, -150, 0.5, -200)
    mainPanel.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
    mainPanel.BackgroundTransparency = 0.3
    mainPanel.BorderSizePixel = 0
    mainPanel.Parent = teleporterGui
    
    -- Add rounded corners
    local panelCorner = Instance.new("UICorner")
    panelCorner.CornerRadius = UDim.new(0.05, 0)
    panelCorner.Parent = mainPanel
    
    -- Add stroke
    local panelStroke = Instance.new("UIStroke")
    panelStroke.Thickness = 3
    panelStroke.Color = Color3.fromRGB(255, 0, 0)
    panelStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    panelStroke.Parent = mainPanel
    
    -- Apply rainbow effect
    applyRainbowEffect(panelStroke)
    
    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, 0, 0, 30)
    titleLabel.Position = UDim2.new(0, 0, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "PLAYER TELEPORTER"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 20
    titleLabel.Parent = mainPanel
    
    -- Close button
    local closeButton, closeStroke = createButton(
        "CloseButton",
        UDim2.new(1, -35, 0, 5),
        UDim2.new(0, 30, 0, 30),
        Color3.fromRGB(200, 0, 0),
        "X",
        function()
            teleporterGui.Enabled = false
            
            -- Disable auto features when closing
            autoTeleporting = false
            autoFlying = false
            
            -- Disable flying if active
            if flyEnabled then
                disableFly()
            end
        end
    )
    closeButton.Parent = mainPanel
    
    -- Selected player label
    local selectedPlayerLabel = Instance.new("TextLabel")
    selectedPlayerLabel.Name = "SelectedPlayerLabel"
    selectedPlayerLabel.Size = UDim2.new(1, -20, 0, 30)
    selectedPlayerLabel.Position = UDim2.new(0, 10, 0, 40)
    selectedPlayerLabel.BackgroundTransparency = 1
    selectedPlayerLabel.Text = "Selected: None"
    selectedPlayerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    selectedPlayerLabel.Font = Enum.Font.GothamSemibold
    selectedPlayerLabel.TextSize = 16
    selectedPlayerLabel.TextXAlignment = Enum.TextXAlignment.Left
    selectedPlayerLabel.Parent = mainPanel
    
    -- Select player button
    local selectPlayerButton, selectPlayerStroke = createButton(
        "SelectPlayerButton",
        UDim2.new(0, 10, 0, 80),
        UDim2.new(1, -20, 0, 40),
        Color3.fromRGB(0, 120, 255),
        "SELECT PLAYER",
        function()
            mainPanel.PlayerSelectionPanel.Visible = true
        end
    )
    selectPlayerButton.Parent = mainPanel
    
    -- Teleport speed section
    local teleportSpeedLabel = Instance.new("TextLabel")
    teleportSpeedLabel.Name = "TeleportSpeedLabel"
    teleportSpeedLabel.Size = UDim2.new(1, -20, 0, 20)
    teleportSpeedLabel.Position = UDim2.new(0, 10, 0, 130)
    teleportSpeedLabel.BackgroundTransparency = 1
    teleportSpeedLabel.Text = "Teleport Speed: " .. teleportSpeed
    teleportSpeedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    teleportSpeedLabel.Font = Enum.Font.GothamSemibold
    teleportSpeedLabel.TextSize = 14
    teleportSpeedLabel.TextXAlignment = Enum.TextXAlignment.Left
    teleportSpeedLabel.Parent = mainPanel
    
    -- Speed control buttons
    local speedUpButton, speedUpStroke = createButton(
        "SpeedUpButton",
        UDim2.new(0.7, 0, 0, 130),
        UDim2.new(0, 40, 0, 20),
        Color3.fromRGB(0, 255, 0),
        "+",
        function()
            teleportSpeed = math.min(teleportSpeed + speedIncrement, maxSpeed)
            teleportSpeedLabel.Text = "Teleport Speed: " .. teleportSpeed
        end
    )
    speedUpButton.Parent = mainPanel
    
    local speedDownButton, speedDownStroke = createButton(
        "SpeedDownButton",
        UDim2.new(0.55, 0, 0, 130),
        UDim2.new(0, 40, 0, 20),
        Color3.fromRGB(255, 165, 0),
        "-",
        function()
            teleportSpeed = math.max(teleportSpeed - speedIncrement, minSpeed)
            teleportSpeedLabel.Text = "Teleport Speed: " .. teleportSpeed
        end
    )
    speedDownButton.Parent = mainPanel
    
    -- Fly speed section
    local flySpeedLabel = Instance.new("TextLabel")
    flySpeedLabel.Name = "FlySpeedLabel"
    flySpeedLabel.Size = UDim2.new(1, -20, 0, 20)
    flySpeedLabel.Position = UDim2.new(0, 10, 0, 160)
    flySpeedLabel.BackgroundTransparency = 1
    flySpeedLabel.Text = "Fly Speed: " .. flySpeed
    flySpeedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    flySpeedLabel.Font = Enum.Font.GothamSemibold
    flySpeedLabel.TextSize = 14
    flySpeedLabel.TextXAlignment = Enum.TextXAlignment.Left
    flySpeedLabel.Parent = mainPanel
    
    -- Fly speed control buttons
    local flySpeedUpButton, flySpeedUpStroke = createButton(
        "FlySpeedUpButton",
        UDim2.new(0.7, 0, 0, 160  flySpeedUpStroke = createButton(
        "FlySpeedUpButton",
        UDim2.new(0.7, 0, 0, 160),
        UDim2.new(0, 40, 0, 20),
        Color3.fromRGB(0, 255, 0),
        "+",
        function()
            flySpeed = math.min(flySpeed + speedIncrement, maxSpeed)
            flySpeedLabel.Text = "Fly Speed: " .. flySpeed
        end
    )
    flySpeedUpButton.Parent = mainPanel
    
    local flySpeedDownButton, flySpeedDownStroke = createButton(
        "FlySpeedDownButton",
        UDim2.new(0.55, 0, 0, 160),
        UDim2.new(0, 40, 0, 20),
        Color3.fromRGB(255, 165, 0),
        "-",
        function()
            flySpeed = math.max(flySpeed - speedIncrement, minSpeed)
            flySpeedLabel.Text = "Fly Speed: " .. flySpeed
        end
    )
    flySpeedDownButton.Parent = mainPanel
    
    -- Position offset section
    local offsetLabel = Instance.new("TextLabel")
    offsetLabel.Name = "OffsetLabel"
    offsetLabel.Size = UDim2.new(1, -20, 0, 20)
    offsetLabel.Position = UDim2.new(0, 10, 0, 190)
    offsetLabel.BackgroundTransparency = 1
    offsetLabel.Text = "Position Offset (X,Y,Z):"
    offsetLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    offsetLabel.Font = Enum.Font.GothamSemibold
    offsetLabel.TextSize = 14
    offsetLabel.TextXAlignment = Enum.TextXAlignment.Left
    offsetLabel.Parent = mainPanel
    
    -- Offset text box
    local offsetTextBox, offsetStroke = createTextBox(
        "OffsetTextBox",
        UDim2.new(0, 10, 0, 215),
        UDim2.new(1, -20, 0, 30),
        "Enter offset (X,Y,Z)"
    )
    offsetTextBox.Text = "0,0,0" -- Default value
    offsetTextBox.Parent = mainPanel
    
    -- Apply offset button
    local applyOffsetButton, applyOffsetStroke = createButton(
        "ApplyOffsetButton",
        UDim2.new(0, 10, 0, 255),
        UDim2.new(1, -20, 0, 30),
        Color3.fromRGB(0, 200, 0),
        "APPLY OFFSET",
        function()
            -- Parse the offset string (format: "X,Y,Z")
            local offsetComponents = string.split(offsetTextBox.Text, ",")
            if #offsetComponents ~= 3 then
                -- Invalid format
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Invalid Offset",
                    Text = "Format must be X,Y,Z (e.g. 0,5,0)",
                    Duration = 2
                })
                return
            end
            
            local x = tonumber(offsetComponents[1])
            local y = tonumber(offsetComponents[2])
            local z = tonumber(offsetComponents[3])
            
            if not x or not y or not z then
                -- Invalid numbers
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Invalid Offset",
                    Text = "Values must be numbers",
                    Duration = 2
                })
                return
            end
            
            -- Apply the new offset
            positionOffset = Vector3.new(x, y, z)
            
            game.StarterGui:SetCore("SendNotification", {
                Title = "Offset Applied",
                Text = "New offset: " .. offsetTextBox.Text,
                Duration = 2
            })
        end
    )
    applyOffsetButton.Parent = mainPanel
    
    -- Teleport buttons
    local teleportButton, teleportStroke = createButton(
        "TeleportButton",
        UDim2.new(0, 10, 0, 295),
        UDim2.new(0.48, -15, 0, 40),
        Color3.fromRGB(255, 0, 0),
        "TELEPORT",
        function()
            if not selectedPlayer then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Teleport Failed",
                    Text = "No player selected",
                    Duration = 2
                })
                return
            end
            
            local success = teleportToPlayer(selectedPlayer)
            
            if success then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Teleport Success",
                    Text = "Teleported to " .. selectedPlayer.Name,
                    Duration = 2
                })
            end
        end
    )
    teleportButton.Parent = mainPanel
    
    local autoTeleportButton, autoTeleportStroke = createButton(
        "AutoTeleportButton",
        UDim2.new(0.52, 5, 0, 295),
        UDim2.new(0.48, -15, 0, 40),
        Color3.fromRGB(255, 0, 0),
        "AUTO TP: OFF",
        function()
            if not selectedPlayer then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Auto Teleport Failed",
                    Text = "No player selected",
                    Duration = 2
                })
                return
            end
            
            autoTeleporting = not autoTeleporting
            
            -- Update button text
            local button = teleporterGui.MainPanel.AutoTeleportButton
            button.Text = "AUTO TP: " .. (autoTeleporting and "ON" or "OFF")
            button.BackgroundColor3 = autoTeleporting and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(255, 0, 0)
            
            if autoTeleporting then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Auto Teleport Enabled",
                    Text = "Continuously teleporting to " .. selectedPlayer.Name,
                    Duration = 2
                })
            else
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Auto Teleport Disabled",
                    Text = "Stopped teleporting to " .. selectedPlayer.Name,
                    Duration = 2
                })
            end
        end
    )
    autoTeleportButton.Parent = mainPanel
    
    -- Fly buttons
    local flyButton, flyStroke = createButton(
        "FlyButton",
        UDim2.new(0, 10, 0, 345),
        UDim2.new(0.48, -15, 0, 40),
        Color3.fromRGB(0, 0, 255),
        "FLY TO",
        function()
            if not selectedPlayer then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Fly Failed",
                    Text = "No player selected",
                    Duration = 2
                })
                return
            end
            
            -- Enable flying if not already enabled
            if not flyEnabled then
                local ownRootPart = getOwnRootPart()
                if ownRootPart then
                    -- Enable flying
                    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        pcall(function()
                            humanoid:ChangeState(Enum.HumanoidStateType.Physics)
                        end)
                    end
                    
                    pcall(function()
                        ownRootPart.Anchored = true
                    end)
                    
                    flyEnabled = true
                    
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Flying Enabled",
                        Text = "Flying to " .. selectedPlayer.Name,
                        Duration = 2
                    })
                end
            end
            
            -- Try to fly to the player
            local success = flyToPlayer(selectedPlayer)
            
            if not success then
                -- Try backup method
                success = flyToPlayerBackup(selectedPlayer)
                
                if not success then
                    -- Try third method
                    success = flyToPlayerMoveTo(selectedPlayer)
                end
            end
            
            if not success and flyEnabled then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Fly Complete",
                    Text = "Reached " .. selectedPlayer.Name,
                    Duration = 2
                })
            end
        end
    )
    flyButton.Parent = mainPanel
    
    local autoFlyButton, autoFlyStroke = createButton(
        "AutoFlyButton",
        UDim2.new(0.52, 5, 0, 345),
        UDim2.new(0.48, -15, 0, 40),
        Color3.fromRGB(0, 0, 255),
        "AUTO FLY: OFF",
        function()
            if not selectedPlayer then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Auto Fly Failed",
                    Text = "No player selected",
                    Duration = 2
                })
                return
            end
            
            autoFlying = not autoFlying
            
            -- Update button text
            local button = teleporterGui.MainPanel.AutoFlyButton
            button.Text = "AUTO FLY: " .. (autoFlying and "ON" or "OFF")
            button.BackgroundColor3 = autoFlying and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(0, 0, 255)
            
            -- Enable flying if not already enabled
            if autoFlying and not flyEnabled then
                local ownRootPart = getOwnRootPart()
                if ownRootPart then
                    -- Enable flying
                    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        pcall(function()
                            humanoid:ChangeState(Enum.HumanoidStateType.Physics)
                        end)
                    end
                    
                    pcall(function()
                        ownRootPart.Anchored = true
                    end)
                    
                    flyEnabled = true
                end
            end
            
            if autoFlying then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Auto Fly Enabled",
                    Text = "Continuously flying to " .. selectedPlayer.Name,
                    Duration = 2
                })
            else
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Auto Fly Disabled",
                    Text = "Stopped flying to " .. selectedPlayer.Name,
                    Duration = 2
                })
                
                -- Disable flying
                disableFly()
            end
        end
    )
    autoFlyButton.Parent = mainPanel
    
    -- Create player selection panel
    local playerSelectionPanel = createPlayerSelectionPanel(mainPanel)
    
    -- Make the main panel draggable
    makeFrameDraggable(mainPanel)
    
    teleporterGui.Parent = player.PlayerGui
    return teleporterGui
end

-- Function to create a button to open the teleporter
local function createOpenButton()
    -- Remove existing button if it exists
    if player.PlayerGui:FindFirstChild("OpenTeleporterGui") then
        player.PlayerGui.OpenTeleporterGui:Destroy()
    end
    
    local openGui = Instance.new("ScreenGui")
    openGui.Name = "OpenTeleporterGui"
    openGui.ResetOnSpawn = false
    
    local openButton = Instance.new("TextButton")
    openButton.Name = "OpenTeleporterButton"
    openButton.Size = UDim2.new(0, 50, 0, 50)
    openButton.Position = UDim2.new(0.1, -25, 0.1, 0)
    openButton.BackgroundColor3 = Color3.fromRGB(0, 100, 255)
    openButton.BackgroundTransparency = 0.3
    openButton.Text = "🚀"
    openButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    openButton.Font = Enum.Font.GothamBold
    openButton.TextSize = 24
    openButton.BorderSizePixel = 0
    openButton.AutoButtonColor = true
    
    -- Add rounded corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0.5, 0)
    uiCorner.Parent = openButton
    
    -- Add stroke
    local uiStroke = Instance.new("UIStroke")
    uiStroke.Thickness = 2
    uiStroke.Color = Color3.fromRGB(255, 255, 255)
    uiStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    uiStroke.Parent = openButton
    
    -- Apply rainbow effect
    applyRainbowEffect(uiStroke)
    
    openButton.MouseButton1Click:Connect(function()
        -- Show the teleporter GUI
        if player.PlayerGui:FindFirstChild("TeleporterGui") then
            player.PlayerGui.TeleporterGui.Enabled = true
        else
            teleporterGui = createTeleporterGui()
        end
    end)
    
    -- Make the open button draggable
    makeFrameDraggable(openButton)
    
    openButton.Parent = openGui
    openGui.Parent = player.PlayerGui
    
    return openGui
end

-- Auto teleport/fly loop
local autoTeleportConnection = nil

local function setupAutoTeleportLoop()
    if autoTeleportConnection then
        autoTeleportConnection:Disconnect()
    end
    
    autoTeleportConnection = RunService.Heartbeat:Connect(function()
        if autoTeleporting and selectedPlayer then
            teleportToPlayer(selectedPlayer)
        end
        
        if autoFlying and selectedPlayer then
            local success = flyToPlayer(selectedPlayer)
            
            if not success then
                -- Try backup method
                success = flyToPlayerBackup(selectedPlayer)
                
                if not success then
                    -- Try third method
                    flyToPlayerMoveTo(selectedPlayer)
                end
            end
        end
    end)
end

-- Function to handle character changes
local function handleCharacterAdded(newCharacter)
    character = newCharacter
    
    -- Wait for humanoid and root part
    task.spawn(function()
        humanoid = newCharacter:WaitForChild("Humanoid")
        rootPart = newCharacter:WaitForChild("HumanoidRootPart")
        
        -- Reset flying state
        flyEnabled = false
        
        -- Recreate GUI if it was destroyed
        if not player.PlayerGui:FindFirstChild("TeleporterGui") then
            teleporterGui = createTeleporterGui()
            teleporterGui.Enabled = false
        end
        
        if not player.PlayerGui:FindFirstChild("OpenTeleporterGui") then
            openGui = createOpenButton()
        end
        
        -- Restore auto features after a short delay
        task.wait(1)
        
        if autoTeleporting or autoFlying then
            if autoTeleporting then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Auto Teleport Restored",
                    Text = "Continuing to teleport after respawn",
                    Duration = 2
                })
            end
            
            if autoFlying then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Auto Fly Restored",
                    Text = "Continuing to fly after respawn",
                    Duration = 2
                })
                
                -- Re-enable flying
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    pcall(function()
                        humanoid:ChangeState(Enum.HumanoidStateType.Physics)
                    end)
                end
                
                pcall(function()
                    rootPart.Anchored = true
                end)
                
                flyEnabled = true
            end
        end
    end)
end

-- Listen for character changes
player.CharacterAdded:Connect(handleCharacterAdded)

-- Setup auto teleport loop
setupAutoTeleportLoop()

-- Create the open button
openGui = createOpenButton()

-- Initial notification
game.StarterGui:SetCore("SendNotification", {
    Title = "Player Teleporter Loaded",
    Text = "Click the 🚀 button to open the teleporter",
    Duration = 5
})

